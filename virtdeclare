#!/usr/bin/python3
import sys, argparse, uuid, libvirt, lxml.etree

# parse arguments
parser = argparse.ArgumentParser(prog='virtdeclare',description='Define and control libvirt objects idempotently.')
parser.add_argument('-v', '--verbose', action='store_true', help='report actions to stderr')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
parser.add_argument('--type', action='store', required=True, choices = ['domain'], help='object type')
specgroup = parser.add_mutually_exclusive_group(required=True)
specgroup.add_argument('--define', action='store', metavar='PATH', help='XML object definition file path')
specgroup.add_argument('--name', action='store', metavar='ID', help='object name or UUID')
parser.add_argument('--state', action='store', choices = ['active','inactive'], help='state to put object in')
parser.add_argument('--auto', action='store_true', help='set autostart to match state')

args = parser.parse_args()

setstate = args.state

# Switch off annoying libvirt stderr messages
# https://stackoverflow.com/a/45543887
def libvirt_callback(userdata, err):
    pass
libvirt.registerErrorHandler(f=libvirt_callback, ctx=None)

conn = libvirt.open(args.connect)

def vreport(objid,msg):
    if args.verbose:
        print (args.type + " " + str(uuid.UUID(bytes=objid)) + ": " + msg, file=sys.stderr)

match args.type:
    case "domain":
        def activate(domain):
            if not domain.isActive():
                vreport(domain.UUID(),"activate")
                domain.create()

        def deactivate(domain):
            if domain.isActive():
                vreport(domain.UUID(),"deactivate")
                domain.destroy()

        # fetch / define domain
        if args.define:
            with open(args.define,"r") as f:
                specDef = f.read()
            specDefXML = lxml.etree.fromstring(specDef)
            specUUID = uuid.UUID(specDefXML.find("uuid").text).bytes
            try:
                found = conn.lookupByUUID(specUUID)
            except libvirt.libvirtError:
                found = None
            if found:
                foundActive = found.isActive()
                foundDef = found.XMLDesc(flags=2)
                foundDefXML = lxml.etree.fromstring(foundDef)
                foundName = foundDefXML.find("name").text
                specName = specDefXML.find("name").text
                if foundName != specName:
                    vreport(found.UUID(),"undefine")
                    found.undefine()
                vreport(specUUID,"redefine")
                domain = conn.defineXML(specDef)
                newDef = domain.XMLDesc(flags=2)
                defchanged = foundDef != newDef
                vreport(specUUID,"changed" if defchanged else "unchanged")
                if defchanged and (setstate != "inactive"):
                    deactivate(found)
                    if foundActive:
                        setstate = "active"
            else:
                vreport(specUUID,"define new")
                domain = conn.defineXML(specDef)
        else:
            try:
                specUUID = uuid.UUID(args.name).bytes
                domain = conn.lookupByUUID(specUUID)
            except ValueError:
                domain = conn.lookupByName(args.name)

        # set state
        match setstate:
            case "active":
                activate(domain)
            case "inactive":
                deactivate(domain)

        # set autostart
        if args.auto:
            match args.state:
                case "active":
                    vreport(domain.UUID(),"set autostart true")
                    domain.setAutostart(True)
                case "inactive":
                    vreport(domain.UUID(),"set autostart false")
                    domain.setAutostart(False)
