#!/usr/bin/python3
import sys, argparse, uuid, libvirt, lxml.etree

# parse arguments
parser = argparse.ArgumentParser(prog='virtdeclare',description='Define and start/stop libvirt domains idempotently.')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
specgroup = parser.add_mutually_exclusive_group(required=True)
specgroup.add_argument('--define', action='store', metavar='PATH', help='XML domain definition file path')
specgroup.add_argument('--name', action='store', metavar='ID', help='domain name or UUID')
parser.add_argument('--state', action='store', choices = ['running','stopped'], help='state to put domain in')
parser.add_argument('--auto', action='store_true', help='set autostart to match state')
parser.add_argument('-v', '--verbose', action='store_true', help='report actions to stderr')
args = parser.parse_args()

setstate = args.state

# Switch off annoying libvirt stderr messages
# https://stackoverflow.com/a/45543887
def libvirt_callback(userdata, err):
    pass
libvirt.registerErrorHandler(f=libvirt_callback, ctx=None)

conn = libvirt.open(args.connect)

def vreport(domid,msg):
    if args.verbose:
        print ("domain " + str(uuid.UUID(bytes=domid)) + ": " + msg, file=sys.stderr)

def start(domain):
    if not domain.isActive():
        vreport(domain.UUID(),"start")
        domain.create()

def stop(domain):
    if domain.isActive():
        vreport(domain.UUID(),"stop")
        domain.destroy()

# fetch / define domain
if args.define:
    with open(args.define,"r") as f:
        domDef = f.read()
    domxml = lxml.etree.fromstring(domDef)
    domid = uuid.UUID(domxml.find("uuid").text).bytes
    try:
        olddomain = conn.lookupByUUID(domid)
    except libvirt.libvirtError:
        olddomain = None
    if olddomain:
        oldDomDesc = olddomain.XMLDesc(flags=2)
        oldActive = olddomain.isActive()
        vreport(domid,"redefine")
        domain = conn.defineXML(domDef)
        newDomDesc = domain.XMLDesc(flags=2)
        defchanged = oldDomDesc != newDomDesc
        vreport(domid,"changed" if defchanged else "unchanged")
        if defchanged and (setstate != "stopped"):
            stop(olddomain)
            if oldActive:
                setstate = "running"
    else:
        vreport(domid,"define new")
        domain = conn.defineXML(domDef)
else:
    try:
        domid = uuid.UUID(args.name).bytes
        domain = conn.lookupByUUID(domid)
    except ValueError:
        domain = conn.lookupByName(args.name)

# set state
match setstate:
    case "running":
        start(domain)
    case "stopped":
        stop(domain)

# set autostart
if args.auto:
    match args.state:
        case "running":
            vreport(domain.UUID(),"set autostart true")
            domain.setAutostart(True)
        case "stopped":
            vreport(domain.UUID(),"set autostart false")
            domain.setAutostart(False)
