#!/usr/bin/python3
import argparse, uuid, libvirt

# parse arguments
parser = argparse.ArgumentParser(prog='virtdeclare',description='Control libvirt domains declaratively and idempotently.')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
specgroup = parser.add_mutually_exclusive_group(required=True)
specgroup.add_argument('--define', action='store', metavar='PATH', help='XML domain definition file path')
specgroup.add_argument('--name', action='store', metavar='ID', help='domain name or UUID')
parser.add_argument('--state', action='store', choices = ['running','stopped'], required=True, help='state to put domain in')
parser.add_argument('--auto', action='store_true', help='set autostart to match state')
args = parser.parse_args()

conn = libvirt.open(args.connect)

if args.define:
    print("def:", args.define)
else:
    try:
        uuid = uuid.UUID(args.name).bytes
        domain = conn.lookupByUUID(uuid)
    except ValueError:
        domain = conn.lookupByName(args.name)
    match args.state:
        case "running":
            if not domain.isActive():
                domain.create()
        case "stopped":
            if domain.isActive():
                domain.destroy()
    if args.auto:
        match args.state:
            case "running":
                domain.setAutostart(True)
            case "stopped":
                domain.setAutostart(False)
