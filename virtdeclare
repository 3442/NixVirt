#!/usr/bin/python3
import sys, argparse, uuid, libvirt, lxml.etree

# parse arguments
parser = argparse.ArgumentParser(prog='virtdeclare',description='Control libvirt domains declaratively and idempotently.')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
specgroup = parser.add_mutually_exclusive_group(required=True)
specgroup.add_argument('--define', action='store', metavar='PATH', help='XML domain definition file path')
specgroup.add_argument('--name', action='store', metavar='ID', help='domain name or UUID')
parser.add_argument('--state', action='store', choices = ['running','stopped'], help='state to put domain in')
parser.add_argument('--auto', action='store_true', help='set autostart to match state')
parser.add_argument('-v', '--verbose', action='store_true', help='report actions to stderr')
parser.add_argument('--check', action='store_true', help='don\'t perform actions, exit with 1 if any action would be performed')
args = parser.parse_args()

# Switch off annoying libvirt stderr messages
# https://stackoverflow.com/a/45543887
def libvirt_callback(userdata, err):
    pass
libvirt.registerErrorHandler(f=libvirt_callback, ctx=None)

conn = libvirt.open(args.connect)

changed = 0

def action(domid,msg):
    if args.verbose:
        print ("domain " + str(uuid.UUID(bytes=domid)) + ": " + msg, file=sys.stderr)
    if args.check:
        global changed
        changed = 1
        return False
    else:
        return True

# fetch / define domain
if args.define:
    domxml = lxml.etree.parse(args.define)
    domxmlstr = lxml.etree.canonicalize(domxml,strip_text=True)
    domid = uuid.UUID(domxml.find("uuid").text).bytes
    try:
        olddomain = conn.lookupByUUID(domid)
    except libvirt.libvirtError:
        olddomain = None
    if olddomain:
        olddomxml = lxml.etree.fromstring(olddomain.XMLDesc())
        olddomxmlstr = lxml.etree.canonicalize(olddomxml,strip_text=True)
        if olddomxmlstr == domxmlstr:
            domain = olddomain
        else:
            if olddomain.isActive():
                log (domid,"stop")
                olddomain.destroy()
            if action (domid,"undefine"):
                olddomain.undefine()
            if action (domid,"define"):
                domain = conn.defineXML(domxmlstr)
            else:
                sys.exit(changed)
    else:
        if action (domid,"define"):
            domain = conn.defineXML(domxmlstr)
        else:
            sys.exit(changed)

else:
    try:
        domid = uuid.UUID(args.name).bytes
        domain = conn.lookupByUUID(domid)
    except ValueError:
        domain = conn.lookupByName(args.name)

# set state
match args.state:
    case "running":
        if not domain.isActive():
            if action (domain.UUID(),"start"):
                domain.create()
    case "stopped":
        if domain.isActive():
            if action (domain.UUID(),"stop"):
                domain.destroy()

# set autostart
if args.auto:
    match args.state:
        case "running":
            if action (domain.UUID(),"set autostart true"):
                domain.setAutostart(True)
        case "stopped":
            if action (domain.UUID(),"set autostart false"):
                domain.setAutostart(False)

sys.exit(changed)
