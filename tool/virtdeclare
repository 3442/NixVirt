#!/usr/bin/python3
import sys, argparse, uuid, lxml.etree, libvirt, nixvirt

# parse arguments
parser = argparse.ArgumentParser(prog='virtdeclare',description='Define and control libvirt objects idempotently.')
parser.add_argument('-v', '--verbose', action='store_true', help='report actions to stderr')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
parser.add_argument('--type', action='store', required=True, choices = nixvirt.objectTypes, help='object type')
specgroup = parser.add_mutually_exclusive_group(required=True)
specgroup.add_argument('--define', action='store', metavar='PATH', help='XML object definition file path')
specgroup.add_argument('--uuid', action='store', metavar='ID', help='object UUID')
specgroup.add_argument('--name', action='store', metavar='ID', help='object name')
parser.add_argument('--state', action='store', choices = ['active','inactive'], help='state to put object in')
parser.add_argument('--auto', action='store_true', help='set autostart to match state')
args = parser.parse_args()

try:
    session = nixvirt.Session(args.connect,args.verbose)
    oc = nixvirt.getObjectConnection(session,args.type)

    # fetch / define object
    if args.define:
        with open(args.define,"r") as f:
            specDef = f.read()
        specDefXML = lxml.etree.fromstring(specDef)
        subject = oc.fromDefinitionXML(specDefXML)
    elif args.uuid:
        specUUID = uuid.UUID(args.uuid).bytes
        subject = oc.fromUUID(specUUID)
    else:
        subject = oc.fromName(args.name)

    # set state
    match args.state:
        case "active":
            subject.setActive(True)
        case "inactive":
            subject.setActive(False)
        case None:
            subject.setActive(None)

    # set autostart
    if args.auto:
        match args.state:
            case "active":
                subject.setAutostart(True)
            case "inactive":
                subject.setAutostart(False)

except libvirt.libvirtError as err:
    print ("virtdeclare: error:", err, file=sys.stderr)
    sys.exit(1)
