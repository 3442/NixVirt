#!/usr/bin/python3
import sys, argparse, uuid, lxml.etree, json, libvirt, nixvirt

parser = argparse.ArgumentParser(prog='nixvirt-module-helper',description='Define and control a collection of libvirt objects idempotently.')
parser.add_argument('-v', '--verbose', action='store_true', help='report actions to stderr')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
parser.add_argument('settingspath', action='store', metavar='PATH', help='path to JSON file of settings')
args = parser.parse_args()

with open(args.settingspath,"r") as f:
    settings = json.load(f)

try:
    conn = nixvirt.getConnection(args.connect)

    for (type,key) in [("network","networks"),("pool","pools"),("domain","domains")]:
        itemlist = settings.get(key)
        if itemlist is not None:
            oc = nixvirt.getObjectConnection(conn,type,args.verbose)
            keepUUIDs = []
            for item in itemlist:
                setstate = item["active"]
                with open(item["definition"],"r") as f:
                    specDef = f.read()
                specDefXML = lxml.etree.fromstring(specDef)
                (subject,deactivated) = oc.define(specDefXML)
                if deactivated and (setstate is None):
                    setstate = "active"
                keepUUIDs += [subject.uuid]

                # set state
                match setstate:
                    case "active":
                        subject.activate()
                    case "inactive":
                        subject.deactivate()

            allObjects = oc.getAll()

            for object in allObjects:
                if object.uuid in keepUUIDs:
                    pass
                else:
                    object.undefine()

except libvirt.libvirtError as err:
    print ("virtdeclare: error:", err, file=sys.stderr)
    sys.exit(1)
